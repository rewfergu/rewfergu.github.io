{"version":3,"sources":["webpack:///path---projects-quadcopter-77bcc4399465a8b96a42.js","webpack:///./.cache/json/projects-quadcopter.json"],"names":["webpackJsonp","525","module","exports","data","siteJson","name","folder","status","image","description","tags","github","link","projectCategory","edges","node","allMarkdownRemark","frontmatter","title","date","fields","slug","excerpt","html","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,UAAYC,KAAA,aAAAC,OAAA,aAAAC,OAAA,EAAAC,MAAA,qEAAAC,YAAA,2EAAAC,MAAA,+CAAAC,OAAA,KAAAC,KAAA,MAA4SC,iBAAoBC,QAAUC,MAAQV,KAAA,yBAAAC,OAAA,yBAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,sDAAAC,QAAAC,OAAA,KAAAC,KAAA,QAAqMG,MAAQV,KAAA,iBAAAC,OAAA,iBAAAC,OAAA,EAAAC,MAAA,yEAAAC,YAAA,2FAAAC,MAAA,mCAAAC,OAAA,4CAAAC,KAAA,QAAsWG,MAAQV,KAAA,UAAAC,OAAA,UAAAC,OAAA,EAAAC,MAAA,mEAAAC,YAAA,wHAAAC,KAAA,KAAAC,OAAA,sCAAAC,KAAA,QAA0UG,MAAQV,KAAA,eAAAC,OAAA,eAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,yCAAAC,QAAAC,OAAA,KAAAC,KAAA,QAAoKG,MAAQV,KAAA,YAAAC,OAAA,YAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,gFAAAC,QAAAC,OAAA,KAAAC,KAAA,QAAqMG,MAAQV,KAAA,kBAAAC,OAAA,kBAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,gOAAAC,MAAA,kBAAAC,OAAA,KAAAC,KAAA,QAAiXG,MAAQV,KAAA,UAAAC,OAAA,UAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,oEAAAC,QAAAC,OAAA,KAAAC,KAAA,QAAqLG,MAAQV,KAAA,YAAAC,OAAA,YAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,qDAAAC,QAAAC,OAAA,KAAAC,KAAA,QAA0KG,MAAQV,KAAA,aAAAC,OAAA,aAAAC,OAAA,EAAAC,MAAA,qEAAAC,YAAA,2EAAAC,MAAA,+CAAAC,OAAA,KAAAC,KAAA,QAA+SG,MAAQV,KAAA,4BAAAC,OAAA,4BAAAC,OAAA,EAAAC,MAAA,KAAAC,YAAA,+gBAAAC,MAAA,yBAAAC,OAAA,KAAAC,KAAA,QAA2rBG,MAAQV,KAAA,2BAAAC,OAAA,2BAAAC,OAAA,EAAAC,MAAA,mFAAAC,YAAA,oKAAAC,MAAA,kCAAAC,OAAA,KAAAC,KAAA,QAAqaG,MAAQV,KAAA,eAAAC,OAAA,eAAAC,OAAA,EAAAC,MAAA,uEAAAC,YAAA,mcAAAC,MAAA,cAAAC,OAAA,KAAAC,KAAA,SAA4oBI,mBAAsBF,QAAUC,MAAQE,aAAeC,MAAA,6BAAAC,KAAA,oBAA+DC,QAAWC,KAAA,+DAAqEC,QAAA,+IAAAC,KAAA,2yEAAo9ER,MAAQE,aAAeC,MAAA,oBAAAC,KAAA,oBAAsDC,QAAWC,KAAA,sDAA4DC,QAAA,8IAAAC,KAAA,2iBAA4sBR,MAAQE,aAAeC,MAAA,WAAAC,KAAA,oBAA6CC,QAAWC,KAAA,6CAAmDC,QAAA,gJAAAC,KAAA,ovBAA65BC,aAAgBnB,KAAA,aAAAC,OAAA,eAAAC,OAAA,EAAAC,MAAA,qEAAAC,YAAA,2EAAAC,MAAA,+CAAAC,OAAA,KAAAC,KAAA","file":"path---projects-quadcopter-77bcc4399465a8b96a42.js","sourcesContent":["webpackJsonp([65211397632386],{\n\n/***/ 525:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"siteJson\":{\"name\":\"Quadcopter\",\"folder\":\"quadcopter\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null},\"projectCategory\":{\"edges\":[{\"node\":{\"name\":\"Arduino Web Controller\",\"folder\":\"arduino-web-controller\",\"status\":2,\"image\":null,\"description\":\"I want to control hardware through a web interface.\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Budget Tracker\",\"folder\":\"budget-tracker\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Budget-Tracker/sample.png\",\"description\":\"A mobile application used to track expenses. Built in AngularJS with a Firebase backend.\",\"tags\":[\"angular\",\"firebase\",\"javascript\"],\"github\":\"https://github.com/rewfergu/budgetTracker\",\"link\":null}},{\"node\":{\"name\":\"Hangman\",\"folder\":\"hangman\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/hangman/hangman.png\",\"description\":\"An online version of the hangman game with user authentication, single player and real time multiplayer capabilities.\",\"tags\":null,\"github\":\"https://github.com/rewfergu/hangman\",\"link\":null}},{\"node\":{\"name\":\"Laptop Stand\",\"folder\":\"laptop-stand\",\"status\":2,\"image\":null,\"description\":\"I want my own laptop stand for my desk\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Maze Game\",\"folder\":\"maze-game\",\"status\":2,\"image\":null,\"description\":\"A simple maze game for mobile that uses the accelerometer to move the player.\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Midi Controller\",\"folder\":\"midi-controller\",\"status\":2,\"image\":null,\"description\":\"Some controls in Logic are just easier if you have a physical knob or control to manipulate. Assigning them is pretty easy in the software, I just need to create some knobs to assign. Arduino can output this info in MIDI.\",\"tags\":[\"arduino\",\"midi\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Octopus\",\"folder\":\"octopus\",\"status\":2,\"image\":null,\"description\":\"I’m trying to script a looping animation for octopus tentacle(s).\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Projector\",\"folder\":\"projector\",\"status\":2,\"image\":null,\"description\":\"a diy method of projecting images from my computer\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Quadcopter\",\"folder\":\"quadcopter\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Raspberry Pi Video Camera\",\"folder\":\"raspberry-pi-video-camera\",\"status\":2,\"image\":null,\"description\":\"I used to have a pretty big collection of vintage cameras, although its quite a bit smaller these days. I purchased a really cool Canon super 8 camera with sound the other day and I’ve been trying to figure out to breathe new life into it. I imagined that if I could find a way to modify the Raspberry Pi camera module and fit it inside the case, there would be enough room inside the film compartment for the rest of the Raspberry Pi’s electronics. I’d have a Raspberry Pi powered camera inside a cool vintage super 8 case.\",\"tags\":[\"raspberry pi\",\"python\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Untitled Water Drop Game\",\"folder\":\"untitled-water-drop-game\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Untitled-Water-Drop-Game/header.gif\",\"description\":\"A mobile game where the main character is a drop of water. Physical properties like surface tension apply. Enemies are evaporative elements like sun, fires, etc.\",\"tags\":[\"animation\",\"javascript\",\"unity\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Weather Lamp\",\"folder\":\"weather-lamp\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Weather-Lamp/header.svg\",\"description\":\"I picked an office with no windows, so I’m stuck with artificial light only while I work. I’d like some ambient light provided with RGB LEDs that change their color temperature based on the local weather outside. I’m sure there are lamps that do this, but I would like the light more integrated into my work area. Not one single spot of colored light, but an overall ambient glow. I figure to get this effect I would have to build something myself.\",\"tags\":[\"processing\"],\"github\":null,\"link\":null}}]},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"remote controlled web page\",\"date\":\"25 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-25-remote-controlled-web-page/\"},\"excerpt\":\"Getting an RC transmitter to talk to a servo is pretty easy. That's what it is made for and it pretty much works out of the box. Getting an…\",\"html\":\"<p>Getting an RC transmitter to talk to a servo is pretty easy. That's what it is made for and it pretty much works out of the box. Getting an RC transmitter to talk to node.js isn't really that straightforward.  </p>\\n<div class=\\\"flex-video\\\"><iframe src=\\\"https://drive.google.com/file/d/1yJgTYC08b6wN3c14Y-_b0giQ2Z8pHtCKPw/preview\\\" width=\\\"640\\\" height=\\\"480\\\"></iframe></div>\\n<p>I started by putting a voltmeter on the pins of the rc receiver and I did get a voltage when I moved the stick, but it was very small.</p>\\n<ul>\\n<li>0.26 at center</li>\\n<li>0.35 all the way right</li>\\n<li>0.17 all the way left</li>\\n</ul>\\n<p>If you try using analogRead() with johnny five on those values it doesn't really work. Plug a servo into those pins and it works fine though, so somehow they know what to do with the voltage.  I pulled the case off and started poking around with a voltmeter to see if any of the values could be useful to input into the analog pins of the Arduino. It turns out the voltage on two of the pins of the potentiometer were usable! So basically to use the signal coming off the RC transmitter I just needed to use an extra servo as an interpreter.</p>\\n<figure>\\n  <img src=\\\"https://lh3.googleusercontent.com/146mhjTTG3ZoNv707RkN9lAEfaVrn5kUYeT08YYc1a656wkq0g6fwJckLAXOvUWCsb-eFey1iBp4wgROOSfKIhcOlPJhaBkFx5SDpZGMYkxBcBdRfBOtymUppXV_gIGPko1mw_c8sViAAWXg_le-3SQIZXfQMCNq2ENZ1Cz0O7LFemwt2a5q8r8jI_zqDHISsLqnDS1MyKTjFH2lB2QcdUqOlW0TF7bPHSxEN99GPLq4w4afZ4sIKEsNuFUrofRPZAH7A6UMLz8vn4GhHi20zjAYd3DtaNARYiRAM4YhyqJG3PG2O8palx0c66fc1pRegRfAUB8lPjPKBbVxDygw4Ej2w9PGSSx_cuEFXKgb4xgS4aFxB3OSMUgIr-F9wUVEhyHs9TJXtSHlQFsbWibyjhI0T4ceMdRSzjSfg4O0cQrGSOaw3EwAHUi-U5vuOsD4KXosxP5wyVHwDKfsNwBr2qvgnAoBa4DHH-h5n3uWP-qz9ObZ_lVXP0gDNkyLVpnsoa3_55tLxz6JZLjNG0MaBe--cbf1i7CcIsJihgK9uNoqLX4jxk9tzb5r1-kb7ZAB0qWsxw=w1242-h1656-no\\\" alt=\\\"the inside of a servo\\\">\\n  <figcaption>\\n    If I attach wires to two of the contacts on a potentiometer I can get a voltage that johnny five will read via analogRead()\\n  </figcaption>\\n</figure>\\n<p>Using johnny five's analogRead function, I was getting useful values.</p>\\n<ul>\\n<li>214 at center</li>\\n<li>307 all the way right</li>\\n<li>120 all the way left</li>\\n</ul>\\n<p>Since I only needed three real states to control the screen, I can group conditional statements to send socket.io messages.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"salvaged RC parts\",\"date\":\"17 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-17-salvaged-RC-parts/\"},\"excerpt\":\"I was able to salvage the transmitter, receiver, motor, speed controller, and servos from an old RC plane I found.  Still works. The whole…\",\"html\":\"<p>I was able to salvage the transmitter, receiver, motor, speed controller, and servos from an old RC plane I found.  Still works. The whole setup is actually much simpler than I imagined.</p>\\n<p>It does need lots of batteries, which I don't have, so I just pulled a couple AC adapters out of my AC adapter graveyard and wired the transmitter and receiver directly to them. The receiver worked with 5 volts and the transmitter with 12.</p>\\n<p><video src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/rc_test.mp4\\\" controls></video></p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"nodeClaw\",\"date\":\"11 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-11-nodeClaw/\"},\"excerpt\":\"This is a simple experiment to communicate with servos over a node server.  Node is running an express server with a react ui, communication…\",\"html\":\"<p><video src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/react_test.mp4\\\" controls></video></p>\\n<p>This is a simple experiment to communicate with servos over a node server.  Node is running an express server with a react ui, communication is then sent back to the server in real time using socket.io, then those instructions are sent to the servos using the Johnny Five framework.</p>\\n<p><img src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/nodeClaw-ui-01.png\\\" alt=\\\"first node claw ui\\\"></p>\\n<p>You can use the UI slider to send a message to the servo. The range is 0 to 180 to reflect the degrees of the servos motion.</p>\\n<p><a href=\\\"https://github.com/rewfergu/nodeClaw\\\">https://github.com/rewfergu/nodeClaw</a></p>\"}}]}},\"pathContext\":{\"name\":\"Quadcopter\",\"folder\":\"/quadcopter/\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---projects-quadcopter-77bcc4399465a8b96a42.js","module.exports = {\"data\":{\"siteJson\":{\"name\":\"Quadcopter\",\"folder\":\"quadcopter\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null},\"projectCategory\":{\"edges\":[{\"node\":{\"name\":\"Arduino Web Controller\",\"folder\":\"arduino-web-controller\",\"status\":2,\"image\":null,\"description\":\"I want to control hardware through a web interface.\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Budget Tracker\",\"folder\":\"budget-tracker\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Budget-Tracker/sample.png\",\"description\":\"A mobile application used to track expenses. Built in AngularJS with a Firebase backend.\",\"tags\":[\"angular\",\"firebase\",\"javascript\"],\"github\":\"https://github.com/rewfergu/budgetTracker\",\"link\":null}},{\"node\":{\"name\":\"Hangman\",\"folder\":\"hangman\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/hangman/hangman.png\",\"description\":\"An online version of the hangman game with user authentication, single player and real time multiplayer capabilities.\",\"tags\":null,\"github\":\"https://github.com/rewfergu/hangman\",\"link\":null}},{\"node\":{\"name\":\"Laptop Stand\",\"folder\":\"laptop-stand\",\"status\":2,\"image\":null,\"description\":\"I want my own laptop stand for my desk\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Maze Game\",\"folder\":\"maze-game\",\"status\":2,\"image\":null,\"description\":\"A simple maze game for mobile that uses the accelerometer to move the player.\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Midi Controller\",\"folder\":\"midi-controller\",\"status\":2,\"image\":null,\"description\":\"Some controls in Logic are just easier if you have a physical knob or control to manipulate. Assigning them is pretty easy in the software, I just need to create some knobs to assign. Arduino can output this info in MIDI.\",\"tags\":[\"arduino\",\"midi\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Octopus\",\"folder\":\"octopus\",\"status\":2,\"image\":null,\"description\":\"I’m trying to script a looping animation for octopus tentacle(s).\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Projector\",\"folder\":\"projector\",\"status\":2,\"image\":null,\"description\":\"a diy method of projecting images from my computer\",\"tags\":[],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Quadcopter\",\"folder\":\"quadcopter\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Raspberry Pi Video Camera\",\"folder\":\"raspberry-pi-video-camera\",\"status\":2,\"image\":null,\"description\":\"I used to have a pretty big collection of vintage cameras, although its quite a bit smaller these days. I purchased a really cool Canon super 8 camera with sound the other day and I’ve been trying to figure out to breathe new life into it. I imagined that if I could find a way to modify the Raspberry Pi camera module and fit it inside the case, there would be enough room inside the film compartment for the rest of the Raspberry Pi’s electronics. I’d have a Raspberry Pi powered camera inside a cool vintage super 8 case.\",\"tags\":[\"raspberry pi\",\"python\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Untitled Water Drop Game\",\"folder\":\"untitled-water-drop-game\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Untitled-Water-Drop-Game/header.gif\",\"description\":\"A mobile game where the main character is a drop of water. Physical properties like surface tension apply. Enemies are evaporative elements like sun, fires, etc.\",\"tags\":[\"animation\",\"javascript\",\"unity\"],\"github\":null,\"link\":null}},{\"node\":{\"name\":\"Weather Lamp\",\"folder\":\"weather-lamp\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Weather-Lamp/header.svg\",\"description\":\"I picked an office with no windows, so I’m stuck with artificial light only while I work. I’d like some ambient light provided with RGB LEDs that change their color temperature based on the local weather outside. I’m sure there are lamps that do this, but I would like the light more integrated into my work area. Not one single spot of colored light, but an overall ambient glow. I figure to get this effect I would have to build something myself.\",\"tags\":[\"processing\"],\"github\":null,\"link\":null}}]},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"remote controlled web page\",\"date\":\"25 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-25-remote-controlled-web-page/\"},\"excerpt\":\"Getting an RC transmitter to talk to a servo is pretty easy. That's what it is made for and it pretty much works out of the box. Getting an…\",\"html\":\"<p>Getting an RC transmitter to talk to a servo is pretty easy. That's what it is made for and it pretty much works out of the box. Getting an RC transmitter to talk to node.js isn't really that straightforward.  </p>\\n<div class=\\\"flex-video\\\"><iframe src=\\\"https://drive.google.com/file/d/1yJgTYC08b6wN3c14Y-_b0giQ2Z8pHtCKPw/preview\\\" width=\\\"640\\\" height=\\\"480\\\"></iframe></div>\\n<p>I started by putting a voltmeter on the pins of the rc receiver and I did get a voltage when I moved the stick, but it was very small.</p>\\n<ul>\\n<li>0.26 at center</li>\\n<li>0.35 all the way right</li>\\n<li>0.17 all the way left</li>\\n</ul>\\n<p>If you try using analogRead() with johnny five on those values it doesn't really work. Plug a servo into those pins and it works fine though, so somehow they know what to do with the voltage.  I pulled the case off and started poking around with a voltmeter to see if any of the values could be useful to input into the analog pins of the Arduino. It turns out the voltage on two of the pins of the potentiometer were usable! So basically to use the signal coming off the RC transmitter I just needed to use an extra servo as an interpreter.</p>\\n<figure>\\n  <img src=\\\"https://lh3.googleusercontent.com/146mhjTTG3ZoNv707RkN9lAEfaVrn5kUYeT08YYc1a656wkq0g6fwJckLAXOvUWCsb-eFey1iBp4wgROOSfKIhcOlPJhaBkFx5SDpZGMYkxBcBdRfBOtymUppXV_gIGPko1mw_c8sViAAWXg_le-3SQIZXfQMCNq2ENZ1Cz0O7LFemwt2a5q8r8jI_zqDHISsLqnDS1MyKTjFH2lB2QcdUqOlW0TF7bPHSxEN99GPLq4w4afZ4sIKEsNuFUrofRPZAH7A6UMLz8vn4GhHi20zjAYd3DtaNARYiRAM4YhyqJG3PG2O8palx0c66fc1pRegRfAUB8lPjPKBbVxDygw4Ej2w9PGSSx_cuEFXKgb4xgS4aFxB3OSMUgIr-F9wUVEhyHs9TJXtSHlQFsbWibyjhI0T4ceMdRSzjSfg4O0cQrGSOaw3EwAHUi-U5vuOsD4KXosxP5wyVHwDKfsNwBr2qvgnAoBa4DHH-h5n3uWP-qz9ObZ_lVXP0gDNkyLVpnsoa3_55tLxz6JZLjNG0MaBe--cbf1i7CcIsJihgK9uNoqLX4jxk9tzb5r1-kb7ZAB0qWsxw=w1242-h1656-no\\\" alt=\\\"the inside of a servo\\\">\\n  <figcaption>\\n    If I attach wires to two of the contacts on a potentiometer I can get a voltage that johnny five will read via analogRead()\\n  </figcaption>\\n</figure>\\n<p>Using johnny five's analogRead function, I was getting useful values.</p>\\n<ul>\\n<li>214 at center</li>\\n<li>307 all the way right</li>\\n<li>120 all the way left</li>\\n</ul>\\n<p>Since I only needed three real states to control the screen, I can group conditional statements to send socket.io messages.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"salvaged RC parts\",\"date\":\"17 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-17-salvaged-RC-parts/\"},\"excerpt\":\"I was able to salvage the transmitter, receiver, motor, speed controller, and servos from an old RC plane I found.  Still works. The whole…\",\"html\":\"<p>I was able to salvage the transmitter, receiver, motor, speed controller, and servos from an old RC plane I found.  Still works. The whole setup is actually much simpler than I imagined.</p>\\n<p>It does need lots of batteries, which I don't have, so I just pulled a couple AC adapters out of my AC adapter graveyard and wired the transmitter and receiver directly to them. The receiver worked with 5 volts and the transmitter with 12.</p>\\n<p><video src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/rc_test.mp4\\\" controls></video></p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"nodeClaw\",\"date\":\"11 February 2016\"},\"fields\":{\"slug\":\"/projects/quadcopter/2016-02-11-nodeClaw/\"},\"excerpt\":\"This is a simple experiment to communicate with servos over a node server.  Node is running an express server with a react ui, communication…\",\"html\":\"<p><video src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/react_test.mp4\\\" controls></video></p>\\n<p>This is a simple experiment to communicate with servos over a node server.  Node is running an express server with a react ui, communication is then sent back to the server in real time using socket.io, then those instructions are sent to the servos using the Johnny Five framework.</p>\\n<p><img src=\\\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/nodeClaw-ui-01.png\\\" alt=\\\"first node claw ui\\\"></p>\\n<p>You can use the UI slider to send a message to the servo. The range is 0 to 180 to reflect the degrees of the servos motion.</p>\\n<p><a href=\\\"https://github.com/rewfergu/nodeClaw\\\">https://github.com/rewfergu/nodeClaw</a></p>\"}}]}},\"pathContext\":{\"name\":\"Quadcopter\",\"folder\":\"/quadcopter/\",\"status\":2,\"image\":\"https://s3.amazonaws.com/rewferguson.com/img/Quadcopter/header.svg\",\"description\":\"I'm trying to build a quadcopter, and learning about each piece as I go.\",\"tags\":[\"arduino\",\"node\",\"raspberry pi\",\"johnny five\"],\"github\":null,\"link\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/projects-quadcopter.json\n// module id = 525\n// module chunks = 65211397632386"],"sourceRoot":""}